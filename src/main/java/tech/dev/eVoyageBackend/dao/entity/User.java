/*
 * Created on 2023-08-30 ( Time 17:27:04 )
 * Generated by Telosys Tools Generator ( version 3.3.0 )
 */
// This Bean has a basic Primary Key (not composite) 

package tech.dev.eVoyageBackend.dao.entity;

import lombok.Data;
import lombok.ToString;
import org.apache.commons.lang.StringUtils;
import tech.dev.eVoyageBackend.dao.entity.Role;

import javax.persistence.*;
import java.io.Serializable;
import java.util.Date;

/**
 * Persistent class for entity stored in table "user"
 *
 * @author Telosys Tools Generator
 *
 */
@Data
@ToString
@Entity
@Table(name = "user")
public class User implements Serializable, Cloneable {

	private static final long serialVersionUID = 1L;

	// ----------------------------------------------------------------------
	// ENTITY PRIMARY KEY ( BASED ON A SINGLE FIELD )
	// ----------------------------------------------------------------------
	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	@Column(name = "id", nullable = false)
	private Integer id;

	// ----------------------------------------------------------------------
	// ENTITY DATA FIELDS
	// ----------------------------------------------------------------------
	@Column(name = "login", length = 255)
	private String login;

	@Column(name = "password", length = 255)
	private String password;

	@Column(name = "first_name", length = 255)
	private String firstName;

	@Column(name = "last_name", length = 255)
	private String lastName;

	@Column(name = "otp_code", length = 50)
	private String otpCode;

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "date_send_code_otp_at")
	private Date dateSendCodeOtpAt;

	@Column(name = "fonction", length = 255)
	private String fonction;

	@Column(name = "lieu_fonction", length = 255)
	private String lieuFonction;

	@Column(name = "email", length = 255)
	private String email;

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "born_on")
	private Date bornOn;

	@Column(name = "telephone", length = 255)
	private String telephone;

	@Column(name = "is_default_password")
	private Boolean isDefaultPassword;

	@Column(name = "is_connected")
	private Boolean isConnected;

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "last_activity_date")
	private Date lastActivityDate;

	@Column(name = "is_locked")
	private Boolean isLocked;

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "last_connection_date")
	private Date lastConnectionDate;

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "first_connection")
	private Date firstConnection;

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "last_lock_date")
	private Date lastLockDate;

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "pass_code_created_at")
	private Date passCodeCreatedAt;

	@Column(name = "pass_code", length = 255)
	private String passCode;

	@Column(name = "is_valid_pass_code")
	private Boolean isValidPassCode;

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "pass_code_expire_at")
	private Date passCodeExpireAt;

	@Column(name = "token", length = 512)
	private String token;

	@Column(name = "is_valid_token", length = 255)
	private String isValidToken;

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "token_created_at")
	private Date tokenCreatedAt;

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "token_expire_at")
	private Date tokenExpireAt;

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "created_at")
	private Date createdAt;

	@Column(name = "created_by")
	private Integer createdBy;

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "updated_at")
	private Date updatedAt;

	@Column(name = "updated_by")
	private Integer updatedBy;

	@Column(name = "login_attempts")
	private Integer loginAttempts;

	@Column(name = "is_active")
	private Boolean isActive;

	@Column(name = "search_string", length = 10000)
	private String searchString;

	@Column(name = "is_deleted")
	private Boolean isDeleted;

	@Column(name = "is_ldap_user")
	private Boolean isLdapUser;

	// "roleId" (column "role_id") is not defined by itself because used as FK in a
	// link

	// ----------------------------------------------------------------------
	// ENTITY LINKS ( RELATIONSHIP )
	// ----------------------------------------------------------------------
	@ManyToOne
	@JoinColumn(name = "role_id", referencedColumnName = "id")
	private Role role;

	// ----------------------------------------------------------------------
	// CONSTRUCTOR(S)
	// ----------------------------------------------------------------------
	public User() {
		super();
	}

	// ----------------------------------------------------------------------
	// FULL TEXT SEARCH
	// ----------------------------------------------------------------------
	@PreUpdate
	@PrePersist
	void updateSearchString() {		
		StringBuffer sb = new StringBuffer();
		sb.append(firstName);
		sb.append(",");
		sb.append(lastName);
		sb.append(",");
		sb.append(email);
		sb.append(",");
		sb.append(telephone);
		sb.append(",");
		sb.append(role != null ? role.getLibelle():"");
		final String fullSearchString = sb.toString();
		this.searchString = StringUtils.substring(fullSearchString, 0, 999);
	}

}
