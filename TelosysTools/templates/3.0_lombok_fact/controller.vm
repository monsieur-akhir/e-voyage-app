##----------------------------------------------------------------------------------------------------
## JPA beans suffix

#set ( $tenantEntityName = "SmartBox" )
#set ( $tenantEntityBusiness = ${tenantEntityName} + "Business")

#set ( $dto = ${entity.name} + "Dto" )
#set ( $controllerName = ${entity.name} + "Controller" )
#set ( $businessName = ${entity.name} + "Business" )
#set ($entity_name = ${fn.toUpperCase($entity.databaseTable)})
/*
 * Java controller for entity table ${entity.databaseTable} 
 * Created on $today.date ( Time $today.time )
 * Generator tool : $generator.name ( version $generator.version )
 * Copyright 2017 Savoir Faire Linux. All Rights Reserved.
 */

package ${target.javaPackageFromFolder(${SRC})};

import lombok.extern.java.Log;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import ${ROOT_PKG}.utils.*;
import ${ROOT_PKG}.utils.dto.*;
import ${ROOT_PKG}.utils.contract.*;
import ${ROOT_PKG}.utils.contract.Request;
import ${ROOT_PKG}.utils.contract.Response;
import ${ROOT_PKG}.utils.enums.FunctionalityEnum;
import ${ROOT_PKG}.business.*;
import ${ROOT_PKG}.rest.fact.ControllerFactory;

/**
Controller for table "${entity.databaseTable}"
 * 
 * @author SFL Back-End developper
 *
 */
@Log
@CrossOrigin("*")
@RestController
@RequestMapping(value="/${fn.uncapitalize($entity.name)}")
public class ${controllerName} {

	@Autowired
    private ControllerFactory<$dto> controllerFactory;
	@Autowired
	private ${businessName} $fn.uncapitalize(${businessName});

	@RequestMapping(value="/create",method=RequestMethod.POST,consumes = {"application/json"},produces={"application/json"})
    public Response<$dto> create(@RequestBody Request<$dto> request) {
    	log.info("start method /${fn.uncapitalize($entity.name)}/create");
        Response<$dto> response = controllerFactory.create(${fn.uncapitalize($businessName)}, request, FunctionalityEnum.CREATE_${entity_name});
		log.info("end method /${fn.uncapitalize($entity.name)}/create");
        return response;
    }

	@RequestMapping(value="/update",method=RequestMethod.POST,consumes = {"application/json"},produces={"application/json"})
    public Response<$dto> update(@RequestBody Request<$dto> request) {
    	log.info("start method /${fn.uncapitalize($entity.name)}/update");
        Response<$dto> response = controllerFactory.update(${fn.uncapitalize($businessName)}, request, FunctionalityEnum.UPDATE_${entity_name});
		log.info("end method /${fn.uncapitalize($entity.name)}/update");
        return response;
    }

	@RequestMapping(value="/delete",method=RequestMethod.POST,consumes = {"application/json"},produces={"application/json"})
    public Response<$dto> delete(@RequestBody Request<$dto> request) {
    	log.info("start method /${fn.uncapitalize($entity.name)}/delete");
        Response<$dto> response = controllerFactory.delete(${fn.uncapitalize($businessName)}, request, FunctionalityEnum.DELETE_${entity_name});
		log.info("end method /${fn.uncapitalize($entity.name)}/delete");
        return response;
    }

	@RequestMapping(value="/getByCriteria",method=RequestMethod.POST,consumes = {"application/json"},produces={"application/json"})
    public Response<$dto> getByCriteria(@RequestBody Request<$dto> request) {
    	log.info("start method /${fn.uncapitalize($entity.name)}/getByCriteria");
        Response<$dto> response = controllerFactory.getByCriteria(${fn.uncapitalize($businessName)}, request, FunctionalityEnum.VIEW_${entity_name});
		log.info("end method /${fn.uncapitalize($entity.name)}/getByCriteria");
        return response;
    }
}
